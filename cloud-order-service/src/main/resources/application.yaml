server:
  port: 10091
#  servlet:
#    context-path: /${artifactId}

#spring:
#  application:
#    name: ${artifactId}
#  cloud:
#    config:
#      uri: http://localhost:8070


#------------Eureka------------
eureka:
  client:
    service-url: # eureka服务地址
      defaultZone: http://sample:sample123@localhost:8761/eureka
#      eureka高可用，有多少台连多少台
#      defaultZone: http://sample:sample123@localhost:8761/eureka,http://sample:sample123@localhost:8761/eureka,http://sample:sample123@localhost:8762/eureka
  instance:
    prefer-ip-address: true #在服务端看到的是ip
    # 服务标识，默认带主机名
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
    metadata-map:
      management.port: 10092
      mydata1: 123
      mydata2: 444
#    home-page-url-path: /${artifactId}

#------------Ribbon-------------
#配置ribbon自定义负载均衡策略，cloud-user-service为服务名
cloud-user-service:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
#配置ribbon不走eureka
#    listOfServers: localhost:10092
#
#ribbon:
#  eureka:
#    enabled: false

#ribbon:
#  ConnectTimeout: 1000 #ribbon连接超时时长
#  ReadTimeout: 3500 #ribbon读取超时时长
#  MaxAutoRetries: 0 #当前服务重试次数
#  MaxAutoRetriesNextServer: 0 # 切换服务重试次数（服务高可用情况），默认1
#  okToRetryOnAllOperations: false #true所有请求都重试，false重试GET请求

#------------Actuator-Hystrix监控-----------
management:
  endpoints:
    web:
      exposure:
        include: "*"
  server:
    port: 10092

#-------------Feign------------
feign:
  hystrix:
    enabled: true #feign开启hystrix

hystrix:
  command: #用于控制HystrixCommand的行为
    default:
      execution:
        isolation:
          strategy: THREAD #控制HystrixCommand的隔离策略，THREAD->线程池隔离策略(默认)，SEMAPHORE->信号量隔离策略
          thread:
            timeoutInMilliseconds: 1000 #配置HystrixCommand执行的超时时间，执行超过该时间会进行服务降级处理
            interruptOnTimeout: true #配置HystrixCommand执行超时的时候是否要中断
            interruptOnCancel: true #配置HystrixCommand执行被取消的时候是否要中断
          timeout:
            enabled: true #配置HystrixCommand的执行是否启用超时时间
          semaphore:
            maxConcurrentRequests: 10 #当使用信号量隔离策略时，用来控制并发量的大小，超过该并发量的请求会被拒绝
      fallback:
        enabled: true #用于控制是否启用服务降级
      circuitBreaker: #用于控制HystrixCircuitBreaker的行为
        enabled: true #用于控制断路器是否跟踪健康状况以及熔断请求
        requestVolumeThreshold: 5 #超过该请求数的请求会被拒绝,默认20
        forceOpen: false #强制打开断路器，拒绝所有请求
        forceClosed: false #强制关闭断路器，接收所有请求
      requestCache:
        enabled: true #用于控制是否开启请求缓存
  collapser: #用于控制HystrixCollapser的执行行为
    default:
      maxRequestsInBatch: 100 #控制一次合并请求合并的最大请求数
      timerDelayinMilliseconds: 10 #控制多少毫秒内的请求会被合并成一个
      requestCache:
        enabled: true #控制合并请求是否开启缓存
  threadpool: #用于控制HystrixCommand执行所在线程池的行为
    default:
      coreSize: 10 #线程池的核心线程数
      maximumSize: 10 #线程池的最大线程数，超过该线程数的请求会被拒绝
      maxQueueSize: 100 #用于设置线程池的最大队列大小，-1采用SynchronousQueue，其他正数采用LinkedBlockingQueue
      queueSizeRejectionThreshold: 5 #用于设置线程池队列的拒绝阀值，由于LinkedBlockingQueue不能动态改版大小，使用时需要用该参数来控制线程数

#-------------zipkin------------
spring:
  zipkin:
    base-url: http://localhost:9411
  sleuth:
    sampler:
      probability: 1.0


